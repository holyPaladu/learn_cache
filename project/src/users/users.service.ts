import { Inject, Injectable, NotFoundException } from '@nestjs/common';
import { In, Repository } from 'typeorm';
import { User } from './entities/user.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { Cache } from 'cache-manager';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { CreateUserDto, UpdateUserDto } from './dto/user.dto';

@Injectable()
export class UsersService {
  constructor(
    @Inject(CACHE_MANAGER) private readonly cacheManager: Cache,
    @InjectRepository(User) private readonly userRepository: Repository<User>,
  ) {}

  async checkCacheSize() {
    const keys = ['users', 'user_ids'];
    let totalSize = 0;

    for (const key of keys) {
      const cachedData = await this.cacheManager.get(key);
      if (cachedData) {
        const size = Buffer.byteLength(JSON.stringify(cachedData));
        totalSize += size;
        console.log(`üìè –†–∞–∑–º–µ—Ä '${key}': ${size} –±–∞–π—Ç`);
      } else {
        console.log(`‚ùå –ö–ª—é—á '${key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ`);
      }
    }
    console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${totalSize} –±–∞–π—Ç`);
  }

  //? BAZE SERVICE
  async findOneUser(id: number) {
    const user = this.userRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    return user;
  }
  async createUser(data: CreateUserDto): Promise<User> {
    const user = this.userRepository.create(data);
    return this.userRepository.save(user);
  }

  //! TEST WITH CACHE

  // –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–∑–∞–≤–∞—Ç–µ–ª–µ–π
  async getAllUsers(): Promise<User[]> {
    console.time('getAllUsers');
    const cachedUsers = await this.cacheManager.get('users');
    if (cachedUsers) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
      console.timeEnd('getAllUsers');
      return cachedUsers as User[];
    }

    console.log('‚è≥ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –±–∞–∑—ã...');
    const users = await this.userRepository.find();
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à');
    await this.cacheManager.set('users', users, 60 * 1000);
    console.timeEnd('getAllUsers');
    return users;
  }

  // Save only id on cache test for speed
  // –ü—Ä–∏ 1000 –ø–æ–ª–∑–∞–≤–∞—Ç–µ–ª—è—Ö —É –º–µ–Ω—è –∫—ç—à —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
  /*
    –ü–æ –ø–∞–º—è—Ç–∏ =>
    users = 139174 –±–∞–π—Ç
    user_ids = 3904 –±–∞–π—Ç
    TOTAL = 35.6 —Ä–∞–∑–Ω–∏—Ü–∞

    –ü–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ =>
    users = 3.634 ms
    user_ids = 43.83 ms
    TOTAL = 12 —Ä–∞–∑–Ω–∏—Ü–∞

    –ù–æ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–¥ –ø—Ä–∏ user_ids –ø–æ –∏–Ω–¥–µ–∫—Å—É
    –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∂–∞–µ—Ç
  */
  async getAllUsersTest(): Promise<User[]> {
    console.time('getAllUsers');

    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const cachedUserIds = await this.cacheManager.get<number[]>('user_ids');

    if (cachedUserIds) {
      console.log('‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞:');

      // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç—Ç–∏–º ID
      const users = await this.userRepository.findBy({ id: In(cachedUserIds) });

      console.timeEnd('getAllUsers');
      return users;
    }

    console.log('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã...');
    // 3Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö ID
    const users = await this.userRepository.find();
    const userIds = users.map((user) => user.id);

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à:');
    await this.cacheManager.set('user_ids', userIds, 60 * 1000); // 60 —Å–µ–∫

    console.timeEnd('getAllUsers');
    return users;
  }

  // WRITE-THROUGH Caching
  /* 
    –≠—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞, –µ—Å–ª–∏:
      ‚úî –î–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è.
      ‚úî –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∫—ç—à –≤—Å–µ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∞–ª –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
  */
  async updateUser(userId: number, updateData: UpdateUserDto): Promise<User> {
    const user = await this.userRepository.preload({
      id: userId,
      ...updateData,
    });
    if (!user) throw new NotFoundException('User not found');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    await this.userRepository.save(user);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ä–∞–∑—É
    const cacheKey = `user_${userId}`;
    await this.cacheManager.set(cacheKey, user, 5 * 60 * 1000);

    return user;
  }
  // Cache Aside (Lazy Loading)
  /* 
    –ö–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ä—Ö—É —Ç–æ –µ—Å—Ç—å 
    –≤ –∫—ç—à –ª–æ–∂–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏–≤–∞–µ—Ç—Å—è 
    –∏ –∞ –Ω–µ –≤—Å–µ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª—è–ª–∏
  */
  async getUser(userId: number) {
    const cacheKey = `user_${userId}`;
    const cacheUser = await this.cacheManager.get<User>(cacheKey);
    if (cacheUser) return cacheUser;

    const user = await this.findOneUser(userId);
    await this.cacheManager.set(cacheKey, user, 5 * 60 * 1000);
    return user;
  }
}
